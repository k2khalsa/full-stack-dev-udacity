{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karan\\\\Udacity\\\\Full_Stack_Dev\\\\projects\\\\trivia-api\\\\frontend\\\\src\\\\components\\\\QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      $.ajax({\n        url: \"/questions?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            categories: result.categories,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getByCategory = id => {\n      $.ajax({\n        url: \"/categories/\".concat(id, \"/questions\"),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      $.ajax({\n        url: \"/questions/search\",\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: \"/questions/\".concat(id),\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions. Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \" \", i, \" \"));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"question-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"categories-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      onClick: () => {\n        this.getQuestions();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \" Categories \"), \" \", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \" \", Object.keys(this.state.categories).map(id => React.createElement(\"li\", {\n      key: id,\n      onClick: () => {\n        this.getByCategory(id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \" \", this.state.categories[id], \" \", React.createElement(\"img\", {\n      className: \"category\",\n      src: \"\".concat(this.state.categories[id], \".svg\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), \" \")), \" \"), \" \", React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), \" \"), \" \", React.createElement(\"div\", {\n      className: \"questions-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \" Questions \"), \" \", this.state.questions.map((q, ind) => React.createElement(Question, {\n      key: q.id,\n      question: q.question,\n      answer: q.answer,\n      category: this.state.categories[q.category],\n      difficulty: q.difficulty,\n      questionAction: this.questionAction(q.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    })), \" \", React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \" \", this.createPagination(), \" \"), \" \"));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["C:\\Users\\karan\\Udacity\\Full_Stack_Dev\\projects\\trivia-api\\frontend\\src\\components\\QuestionView.js"],"names":["React","Component","Question","Search","$","QuestionView","constructor","getQuestions","ajax","url","state","page","type","success","result","setState","questions","totalQuestions","total_questions","categories","currentCategory","current_category","error","alert","getByCategory","id","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","Object","keys","map","q","ind","question","answer","category","difficulty"],"mappings":"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","sourcesContent":["import React, {\n  Component\n} from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null,\n    }\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    $.ajax({\n      url: `/questions?page=${this.state.page}`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories,\n          currentCategory: result.current_category\n        })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push( <\n        span key = {\n          i\n        }\n        className = {\n          `page-num ${i === this.state.page ? 'active' : ''}`\n        }\n        onClick = {\n          () => {\n            this.selectPage(i)\n          }\n        } > {\n          i\n        } <\n        /span>)\n      }\n      return pageNumbers;\n    }\n\n    getByCategory = (id) => {\n      $.ajax({\n        url: `/categories/${id}/questions`, //TODO: update request URL\n        type: \"GET\",\n        success: (result) => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          })\n          return;\n        },\n        error: (error) => {\n          alert('Unable to load questions. Please try your request again')\n          return;\n        }\n      })\n    }\n\n    submitSearch = (searchTerm) => {\n      $.ajax({\n        url: `/questions/search`, //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: (result) => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          })\n          return;\n        },\n        error: (error) => {\n          alert('Unable to load questions. Please try your request again')\n          return;\n        }\n      })\n    }\n\n    questionAction = (id) => (action) => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: `/questions/${id}`, //TODO: update request URL\n            type: \"DELETE\",\n            success: (result) => {\n              this.getQuestions();\n            },\n            error: (error) => {\n              alert('Unable to load questions. Please try your request again')\n              return;\n            }\n          })\n        }\n      }\n    }\n\n    render() {\n      return ( <\n          div className = \"question-view\" >\n          <\n          div className = \"categories-list\" >\n          <\n          h2 onClick = {\n            () => {\n              this.getQuestions()\n            }\n          } > Categories < /h2> <\n          ul > {\n            Object.keys(this.state.categories).map((id, ) => ( <\n              li key = {\n                id\n              }\n              onClick = {\n                () => {\n                  this.getByCategory(id)\n                }\n              } > {\n                this.state.categories[id]\n              } <\n              img className = \"category\"\n              src = {\n                `${this.state.categories[id]}.svg`\n              }\n              /> < /\n              li >\n            ))\n          } <\n          /ul> <\n          Search submitSearch = {\n            this.submitSearch\n          }\n          /> < /\n          div > <\n          div className = \"questions-list\" >\n          <\n          h2 > Questions < /h2> {\n          this.state.questions.map((q, ind) => ( <\n            Question key = {\n              q.id\n            }\n            question = {\n              q.question\n            }\n            answer = {\n              q.answer\n            }\n            category = {\n              this.state.categories[q.category]\n            }\n            difficulty = {\n              q.difficulty\n            }\n            questionAction = {\n              this.questionAction(q.id)\n            }\n            />\n          ))\n        } <\n        div className = \"pagination-menu\" > {\n          this.createPagination()\n        } <\n        /div> < /\n      div >\n\n        <\n        /div>\n    );\n  }\n}\n\nexport default QuestionView;"]},"metadata":{},"sourceType":"module"}